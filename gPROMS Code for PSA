{
  gPROMS input file generated by gPROMS Process (Academic) 2.1.1
  Thu Mar 20 13:48:53 GMT 2025

  PSA_Nitrogen_SEP (6) -> \\arran.sms.ed.ac.uk\home\s2196175\PSA\PSA_Nitrogen_SEP (6).gPJ-PB
}

DECLARE TYPE # PSA_Nitrogen_SEP (6):Concentration
    Concentration = 300.0 : -1.0E10 : 1.0E10 unit = "mol/m³"
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Molefrac
    Molefrac = 0.2 : 0.0 : 1.0
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Pressure
    Pressure = 300000.0 : -100000.0 : 1.0E7 unit = "Pa"
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Productivity
    Productivity = 100.0 : -1.0E10 : 1.0E10 unit = "m^3 N2 / m^3"
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Rel_conc
    Rel_conc = 0.1 : -1.0E10 : 1.0
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Velocity
    Velocity = 0.1 : -1.0E10 : 1.0E10 unit = "m/s"
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Watt
    Watt = 0.3 : -1.0E10 : 1.0E10 unit = "J/s"
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Work
    Work = 0.5 : 0.01 : 100000.0 unit = "J/mol"
END

DECLARE TYPE # PSA_Nitrogen_SEP (6):Notype
    Notype = 0.1 : -1.0E10 : 1.0E10
END

MODEL P_565792d5::The_One # PSA_Nitrogen_SEP (6):The_One

PARAMETER
  Nocomp AS INTEGER  # Number of components
  Noend AS INTEGER  # Number of end sections
  D1 AS REAL  # Axial dispersion coefficient (m^2/s)
  epsilon AS REAL  # Void fraction
  Rp AS REAL  # Particle radius (m)
  kf AS REAL  # Film mass transfer coefficient (m/s)
  y_feed AS ARRAY(Nocomp) OF REAL  # Feed gas composition
  P_feed AS REAL  # Feed pressure (Pa)
  P_atm AS REAL  # Atmospheric pressure (Pa)
  D0 AS ARRAY(Nocomp) OF REAL  # Diffusivity (m^2/s)
  qs AS ARRAY(Nocomp) OF REAL  # Saturation loading (mol/kg)
  L AS REAL  # Bed length (m)
  Rb AS REAL  # Bed radius (m)
  b AS ARRAY(Nocomp) OF REAL  # Langmuir constant
  Rg AS REAL  # Universal gas constant (J/mol.K)
  Temp AS REAL  # Temperature (K)
  mu AS REAL  # Gas viscosity (Pa.s)
  MW AS ARRAY(Nocomp) OF REAL  # Molecular weight (kg/mol)
  CV1 AS REAL  # Valve coefficient 1
  CV2 AS REAL  # Valve coefficient 2
  CV3 AS REAL  # Valve coefficient 3
  CV4 AS REAL  # Valve coefficient 4
  CV5 AS REAL  # Valve coefficient 5
  eps AS REAL  # Small numerical constant

DISTRIBUTION_DOMAIN
    axial AS [0 : L]
    radial AS [0 : Rp]

VARIABLE
   c AS DISTRIBUTION(Nocomp, axial) OF Concentration  # Gas phase concentration (mol/mÂ³)
   c_Rp AS DISTRIBUTION(Nocomp, axial) OF Concentration  # Particle surface concentration (mol/mÂ³)
   q AS DISTRIBUTION (Nocomp, axial, radial) OF Concentration 
   v AS DISTRIBUTION (axial) OF Velocity
   theta AS DISTRIBUTION(Nocomp, axial, radial) OF Rel_conc  # Mole fraction in particle (unitless)
   P AS DISTRIBUTION(axial) OF Pressure  # Pressure (Pa)
   y AS DISTRIBUTION (Nocomp, axial) OF Molefrac
   w, wurzel AS DISTRIBUTION(Noend) OF Notype  # Superficial velocity (m/s)
   P_exchange AS DISTRIBUTION (Noend) OF Pressure
   v_exchange AS DISTRIBUTION(Noend) OF Velocity  # Exchange velocity at bed ends (m/s)
   c_exchange AS DISTRIBUTION (Noend) OF Concentration
   y_O2_prod AS Notype  # Oâ‚‚ production mole fraction (unitless)
   y_O2_waste AS Notype  # Oâ‚‚ waste mole fraction (unitless)
   y_N2_prod AS Notype  # Nâ‚‚ production mole fraction (unitless)
   prod_rate AS Notype
   feed_rate AS Notype
   n_feed AS Notype  # Feed rate (unitless, placeholder for flow)
   n_O2_prod AS Notype  # Oâ‚‚ production rate (mol/s, inferred from Concentration * Velocity_conc)
   n_O2_waste AS Notype  # Oâ‚‚ waste rate (mol/s)
   n_N2_prod AS Notype  # Nâ‚‚ production rate (mol/s)
   n_N2_waste AS Notype  # Nâ‚‚ waste rate (mol/s)
   rec_N2 AS Notype  # Nâ‚‚ recovery (unitless)
   Work_done AS Work  # Compressor work (J/mol)
   Power AS Watt  # Power (J/mol, assumed to match Work)
   ADP AS Productivity  # Adsorbent productivity (mol Nâ‚‚/mÂ³ adsorbent h)

SELECTOR
    cstep AS (pressurisation,
              adsorption,
              pressureequalisation1,
              blowdown,
              desorption,
              pressureequalisation2)DEFAULT pressurisation

SET
  Nocomp := 2;  # Number of components (e.g., Oxygen and Nitrogen)
  Noend := 2;  # Number of boundary conditions
  D1 := 4.9E-6;  # Axial dispersion coefficient
  epsilon := 0.4;  # Void fraction of the packed bed
  Rp := 0.003175;  # Particle radius (m)
  kf := 0.02;  # Film mass transfer coefficient
  y_feed := [0.21, 0.79];  # Feed gas composition (O2, N2)
  p_atm := 1E5;  # Atmospheric pressure in Pascal
  D0 := [6.75E-8, 1.475E-9];  # Diffusivity of components (O2, N2)
  qs := [2.64E3, 2.64E3];  # Saturation loading (mol/kg)
  Rb := 0.3;  # Bed radius
  b := [3.50E-3, 3.37E-3]; # Langmuir constants
  Rg := 8.314;  # Universal gas constant (J/mol.K)
  Temp := 298.15;  # Temperature (K)
  mu := 1.8E-5;  # Gas viscosity (Pa.s)
  MW := [32E-3, 28E-3];  # Molecular weight of O2 and N2
  CV1 := 7E-5;  # Valve coefficient 1
  CV2 := 1.96E-6;  # Valve coefficient 2
  CV3 := 1E-4;  # Valve coefficient 3
  CV4 := 1E-4;  # Valve coefficient 4
  CV5 := 1E-3;  # Valve coefficient 5
  eps := 1E-12;  # Small numerical constant
  P_feed := 11.5E5;  # Feed pressure (Pa)
  L := 0.96;  # Column length (m)
 
BOUNDARY 

# gas phase boundary conditions # 

CASE cstep OF 
    WHEN pressurisation: 
        c(1,0) = y_feed(1) * P(0) / Rg / Temp ; 
        PARTIAL(c(1,L),axial) = 0 ; 
        v(L) = 0 ; 
        w(2) = 1 ; 
        wurzel(2) = 1 ; 
        IF (P(0) > 0.53 * P_feed) 
            THEN 
                v(0) = 1.1792486 * Cv1 / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
                w(1)^2 = Rg * (P_feed^2 - P(0)^2) 
                        / (P(0) * sigma(c(1:Nocomp,0) * MW(1:Nocomp))) ; 
                wurzel(1) = abs(w(1)) ; 
            ELSE 
                v(0) = Cv1 * P_feed / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
                w(1)^2 = Rg / (P(0)*sigma(c(1:Nocomp,0)*MW(1:Nocomp)));
                wurzel(1) = abs(w(1));
            END

        WHEN adsorption: 
            c(1,0) = y_feed(1) * P(0) / Rg / Temp ; 
            PARTIAL(c(1,L),axial) = 0 ; 
            v(L) = Cv2 / (3.14 * Rb^2 * epsilon) * wurzel(2) ; 
            w(2)^2 = Rg * P(L)/ sigma(c(1:Nocomp,L) * MW(1:Nocomp)) ; 
            wurzel(2) = abs(w(2)) ; 
            v(0) = 1.1792486 * CV1 / (3.14 * Rb^2 * epsilon) * wurzel(1) ;
            w(1)^2 = Rg * (P_feed^2 - P(0)^2)
                    / (P(0) * sigma(c(1:Nocomp,0)*MW(1:Nocomp))) ;
            wurzel(1) = abs(w(1)) ;

        WHEN pressureequalisation1: 
            PARTIAL(c(1,0),axial) = 0 ; 
            PARTIAL(c(1,L),axial) = 0 ; 
            IF (P_exchange(2) > 0.53 * P(L)) 
                THEN 
                    v(L) = 1.1792486 * Cv3 / (3.14 * Rb^2 * epsilon) * wurzel(2) ; 
                    w(2)^2 = Rg * (P(L)^2 - P_exchange(2)^2)
                            / (P(L) * sigma(c(1:Nocomp,L) * MW(1:Nocomp))) ; 
                    wurzel(2) = abs(w(2)) ; 
                ELSE
                    v(L) = Cv3 / (3.14 * Rb^2 * epsilon) * wurzel(2) ;
                    w(2)^2 = P(L)*Rg/sigma(c(1:Nocomp,L)*MW(1:Nocomp)) ;
                    wurzel(2) = abs(w(2)) ;
            END
            IF (P_exchange(1) > 0.53 * P(0)) 
                THEN 
                    v(0) = - 1.1792486 * Cv3 / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
                    w(1)^2 = Rg * (P(0)^2 - P_exchange(1)^2) 
                            / (P(0) * sigma(c(1:Nocomp,0) * MW(1:Nocomp))) ; 
                    wurzel(1) = abs(w(1)) ; 
                ELSE 
                    v(0) = - Cv3 / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
                    w(1)^2 = P(0) * Rg / sigma(c(1:Nocomp,0) * MW(1:Nocomp)) ; 
                    wurzel(1) = abs(w(1)) ; 
            END 

        WHEN blowdown: 
            PARTIAL(c(1,0),axial) = 0 ; 
            PARTIAL(c(1,L),axial) = 0 ; 
            v(L) = 0 ; 
            w(2) = 1 ; 
            wurzel(2) = 1 ; 
        IF (P_atm > 0.53 * P(0)) 
            THEN 
                v(0) = -1.1792486 * Cv4 / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
                w(1)^2 = Rg * max(1E-6, (P(0)^2 - P_atm^2)) 
                        / (P(0) * sigma(c(1:Nocomp,0) * MW(1:Nocomp))) ; 
                wurzel(1) = abs(w(1)) ; 
            ELSE 
                v(0) = -Cv4 / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
                w(1)^2 = P(0)*Rg/sigma(c(1:Nocomp,0)*MW(1:Nocomp)) ;
                wurzel(1) = abs(w(1)) ; 
        END

    WHEN desorption: 
        PARTIAL(c(1,0),axial) = 0 ; 
        PARTIAL(c(1,L),axial) = 0 ; 
        v(L) = 0 ; 
        w(2) = 1 ; 
        wurzel(2) = 1 ; 
        v(0) = -1.1792486 * Cv5 / (3.14 * Rb^2 * epsilon) * wurzel(1) ; 
        w(1)^2 = Rg * max(1E-6, (P(0)^2-P_atm^2))
                /(P(0) * sigma(c(1:Nocomp,0) * MW(1:Nocomp)));
        wurzel(1) = abs(w(1)) ;

    WHEN pressureequalisation2:
        c(1,0) = c_exchange(1) ;
        c(1,L) = c_exchange(2) ;
        v(L) = - v_exchange(1) ;
        v(0) = v_exchange(1) ;
        w() = 1 ;
        wurzel() = 1 ;
    END #case

# particle centre (10) #

    FOR z := 0 to L DO
        PARTIAL(q(,z,0),radial) = 0;
    END 

# particle surface (11) #

    FOR z := 0 to L DO
        PARTIAL(q(1,z,Rp),radial) = kf / D0(1) * (1 - theta(1,z,Rp))
                                    * (c(1,z) - c_Rp(1,z))
                                    - kf / D0(2) * theta(1,z,Rp)
                                    * (c(2,z) - c_Rp(2,z)) ;
        PARTIAL(q(2,z,Rp),radial) = kf / D0(2) * (1 - theta(2,z,Rp))
                                    * (c(2,z) - c_Rp(2,z))
                                    - kf / D0(1) * theta(2,z,Rp)
                                    * (c(1,z) - c_Rp(1,z)) ;
    END

EQUATION

# fluid phase mass balance (1), (4) #
FOR z := 0|+ TO L|- DO
   -D1 * PARTIAL(c(, z), axial, axial) + PARTIAL(v(z) * c(,z), axial) + 
   $c(, z) + (1 - epsilon) / epsilon * 3 / Rp * kf * (c(, z) - c_Rp(, z)) = 0;
END # for

# continuity condition #

FOR z := 0 TO L DO
   sigma(c(1:Nocomp, z)) = P(z) / Rg / Temp;
END # for

# Darcy's law (pressure drop) #
FOR z := 0 TO L DO
   PARTIAL(P(z), axial) = -180 * mu * (1 - epsilon)^2 / (epsilon^2 * (2 * Rp)^2) * v(z);
END # for

# particle mass balance (17), (18) #
FOR z := 0 TO L DO
   FOR r := 0|+ TO Rp|- DO
      $q(1, z, r) = D0(1) / (1 - theta(1, z, r) - theta(2, z, r)) 
                    * ((1 - theta(2, z, r)) 
                    * (PARTIAL(q(1, z, r), radial, radial) + 2 / r * PARTIAL(q(1, z, r), radial))
                    + theta(1,z,r)
                    *(PARTIAL(q(2,z,r),radial,radial)+ 2 / r * PARTIAL(q(2,z,r),radial)))
                    + D0(1) / (1 - theta(1,z,r) - theta(2,z,r))^2
                    * ((1- theta(2,z,r)) * PARTIAL(theta(1,z,r),radial)
                    + theta(1,z,r) * PARTIAL(theta(2,z,r),radial))
                    * (PARTIAL(q(1,z,r),radial) + PARTIAL(q(2,z,r),radial)) ;
                   $q(2,z,r) = D0(2) / (1 - theta(1,z,r) - theta(2,z,r))
                    * ((1 - theta(1,z,r))
                    * (PARTIAL(q(2,z,r),radial,radial) + 2 / r * PARTIAL(q(2,z,r),radial))
                    + theta(2,z,r)
                    * (PARTIAL(q(1,z,r),radial,radial) + 2 / r * PARTIAL(q(1,z,r),radial)))
                    + D0(2) / (1 - theta(1,z,r) - theta(2,z,r))^2
                    * ((1-theta(1,z,r) * PARTIAL(theta(2,z,r),radial)
                    + theta(2,z,r)) * PARTIAL(theta(1,z,r),radial))
                    * (PARTIAL(q(2,z,r),radial) + PARTIAL(q(1,z,r),radial)) ;
                 END
               END

               # equilibrium isotherm (13) #

               FOR z:= 0 to L DO
                c_Rp(,z) * (1-sigma(theta(1:Nocomp,z,Rp))) = 1/b() * theta(,z,Rp) ;
               END

               # definition of theta # 

               FOR z := 0 to L DO
                FOR r := 0 to Rp DO
                    theta(,z,r) = q(,z,r)/qs() ; 
                END 
               END

               # mole fraction # 

               FOR z := 0 to L DO
                y(,z) = c(,z) / sigma(c(1:Nocomp,z)) ; 
               END

               CASE cstep OF
                WHEN pressurisation:
                    $n_O2_prod = 0 ;
                    $n_N2_prod = 0 ;
                    $n_O2_waste = 0 ;
                    $n_N2_waste = 0 ;
                    $n_feed = 3.14 * Rb^2 * epsilon * v(0) * (C(1,0) + C(2,0)) ; 

                WHEN adsorption:
                    $n_O2_prod = 3.14 * Rb^2 * epsilon * v(L) * C(1,L) ;
                    $n_N2_prod = 3.14 * Rb^2 * epsilon * v(L) * C(2,L) ;
                    $n_O2_waste = 0 ;
                    $n_N2_waste = 0 ;
                    $n_feed = 3.14 * Rb^2 * epsilon * v(0) * (C(1,0) + C(2,0)) ; 
                    
                WHEN pressureequalisation1:
                    $n_O2_prod = 0 ;
                    $n_N2_prod = 0 ;
                    $n_O2_waste = 0 ;
                    $n_N2_waste = 0 ;
                    $n_feed = 0 ;

                WHEN blowdown:
                    $n_O2_prod = 0 ;
                    $n_N2_prod = 0 ;
                    $n_O2_waste = -3.14 * Rb^2 * epsilon * v(0) * C(1,0) ;
                    $n_N2_waste = -3.14 * Rb^2 * epsilon * v(0) * C(2,0) ;
                    $n_feed = 0 ;

                WHEN desorption:
                    $n_O2_prod = 0 ;
                    $n_N2_prod = 0 ;
                    $n_O2_waste = -3.14 * Rb^2 * epsilon * v(0) * C(1,0) ;
                    $n_N2_waste = -3.14 * Rb^2 * epsilon * v(0) * C(2,0) ;
                    $n_feed = 0 ;
                
                WHEN pressureequalisation2:
                    $n_O2_prod = 0 ;
                    $n_N2_prod = 0 ;
                    $n_O2_waste = 0 ;
                    $n_N2_waste = 0 ;
                    $n_feed = 0 ;
             END #case

             y_N2_prod = (n_N2_prod / (n_O2_prod + n_N2_prod + eps)) ;
             y_O2_prod = 1 - y_N2_prod ;
             y_O2_waste = (n_O2_waste / (n_O2_waste + n_N2_waste + eps)) ;
             prod_rate  = (n_N2_prod + n_O2_prod) / 128 ;
             feed_rate = (n_feed) / 128 ; 
             rec_N2 = (n_N2_prod) / (y_feed(2) * n_feed + eps) ;

                #Cycle average power consumed, Unit: Joule/s = Watts
                    Power = 2 * Work_done * Feed_rate ;
                #Theoretical work per mole of gas compressed for a single stage
                    Work_done = 1.4/(1.4-1) * 3.14 * Temp
                                    * (((P_feed/P_atm)^((1.4-1)/1.4)) - 1) ;
                #Adsorbent productivity (m3 N2/ m3 adsorbent h)
                    ADP = ( 2 * prod_rate) * y_N2_prod * 0.0224 * 3600
                            / (3.14159 * 0.0175^2 * 0.35) ;

        
                              
END # MODEL The_One

MODEL P_565792d5::FLOWSHEET # PSA_Nitrogen_SEP (6):FLOWSHEET

UNIT  
    bed1 AS The_One 
    bed2 AS The_One
VARIABLE   
    cycles AS notype  
    totcycles AS notype  
    tot_prod_rate AS notype  
    tot_feed_rate AS notype  

EQUATION  
    bed1.P_exchange(1) = bed2.P(0) ;  
    bed1.P_exchange(2) = bed2.P(bed2.L) ;  
    bed2.v_exchange(1) = - bed1.v(0) ;
    bed2.v_exchange(2) = bed1.v(bed1.L) ;
    bed2.P_exchange(1) = bed1.P(0) ;
    bed2.P_exchange(2) = bed1.P(bed1.L) ;
    bed1.v_exchange(1) = - bed2.v(0) ;
    bed1.v_exchange(2) = bed2.v(bed2.L) ;
    tot_prod_rate      = bed1.prod_rate + bed2.prod_rate ;
    tot_feed_rate      = bed1.feed_rate + bed2.feed_rate ;
    bed2.c_exchange(1)/bed2.P(0) = bed1.c(1,0)/bed1.P(0) ;
    bed2.c_exchange(2)/bed2.P(bed2.L) = bed1.c(1,bed1.L)/bed1.P(bed1.L);
    bed1.c_exchange(1)/bed1.P(0) = bed2.C(1,0)/bed2.P(0) ;
    bed1.c_exchange(2)/bed1.P(bed1.L) = bed2.c(1,bed2.L)/bed2.P(bed2.L) ;

END # MODEL FLOWSHEET

PROCESS P_565792d5::OK # PSA_Nitrogen_SEP (6):OK

UNIT plant AS FLOWSHEET

MONITOR
    plant.bed1.y_N2_prod ;
    plant.bed1.y_O2_prod ;
    plant.bed1.y_O2_waste ;
    plant.bed1.prod_rate ;
    plant.bed1.feed_rate ;
    plant.bed1.rec_N2 ;
    plant.bed1.work_done ;
    plant.bed1.power ;
    plant.bed1.P(*) ;
    plant.bedl.y(*,*) ; 
    plant.bed1.C(*,*) ; 
    plant.bed1.C_Rp(*,*) ; 
    plant.bed1.q(*,*,*) ; 
    plant.bedl.v(*) ; 
    plant.bedl.v_exchange(*) ; 
    plant.bedl.C_exchange(*) ;
    plant.bed1.P_exchange(*) ;
    plant.bedl.n_O2_prod ; 
    plant.bed1.n_N2_prod ;
    plant.bedl.n_O2_waste ;
    plant.bed1.n_feed ;
SET 
    WITHIN plant DO
    WITHIN bed1 DO 
        axial := [OCFEM,3,4] ; 
        radial := [OCFEM,3,1]; 
    END # within 
    WITHIN bed2 DO 
        axial := [OCFEM,3,4] ; 
        radial := [OCFEM,3,1]; 
    END # within 
    END # within 
ASSIGN 
        plant.cycles := 1 ; 
        plant.totcycles := 60 ;
SELECTOR 
        plant.bed1.cstep := plant.bed1.pressurisation ; 
        plant.bed2.cstep := plant.bed2.blowdown ;
INITIAL 
    WITHIN plant DO 
    WITHIN bed1 DO 
    FOR z := 0 to L DO 
    FOR r := 0|+ to Rp|- DO 
        q(,z,r) = 100 ; 
    END # for 
    END # for 
    FOR z := 0|+ to L|- DO  
	c(1,z) = 0.21 * P(z)/Rg/Temp ;
    END # for 
    FOR z := 0|+ to L|- DO 
        P(z) = 1E5 ;
    END # for 
        n_O2_prod = 0 ; 
        n_N2_prod = 0 ; 
        n_O2_waste = 0 ;
        n_N2_waste = 0; 
        n_feed = 0 ; 
    END # within 
    WITHIN bed2 DO 
    FOR z := 0 to L DO 
    FOR r := 0|+ to Rp|- DO 
        q(,z,r) = 200 ; 
    END # for 
    END # for 
    FOR z := 0|+ to L|- DO 
        c(1,z) = 0.21 * P(z)/Rg/Temp ; 
    END # for 
    FOR z := 0|+ to L|- DO
        P(z) = 3E5 ;
    END #for
        n_O2_prod = 0 ; 
        n_N2_prod = 0 ; 
        n_O2_waste = 0 ; 
        n_N2_waste = 0 ; 
        n_feed = 0 ; 
    END #within  
END #within
SOLUTIONPARAMETERS
    gExcelOutput := ON
    OutputLevel := 2
  ReportingInterval := 2.0


  gRMS := "Optimum_Conditions -port 59514 -host 127.0.0.1"


  
SCHEDULE 
    SEQUENCE 
        MONITOR OFF 
    WHILE plant.cycles <= plant.totcycles DO 
    SEQUENCE 
    PARALLEL 
    RESET 
        plant.cycles:= OLD(plant.cycles) + 1 ; 
    END # reset 
    REINITIAL 
        plant.bed1.n_O2_prod, 
        plant.bed1.n_N2_prod, 
        plant.bed1.n_O2_waste, 
        plant.bed1.n_N2_waste, 
        plant.bed1.n_feed, 
        plant.bed2.n_O2_prod, 
        plant.bed2.n_N2_prod, 
        plant.bed2.n_O2_waste, 
        plant.bed2.n_N2_waste, 
        plant.bed2.n_feed 
    WITH 
        plant.bed1.n_O2_prod = 0 ; 
        plant.bed1.n_N2_prod = 0 ; 
        plant.bed1.n_O2_waste = 0 ; 
        plant.bed1.n_N2_waste = 0 ; 
        plant.bed1.n_feed = 0 ; 
        plant.bed2.n_O2_prod = 0 ;
        plant.bed2.n_N2_prod = 0 ; 
        plant.bed2.n_O2_waste = 0 ; 
        plant.bed2.n_N2_waste = 0; 
        plant.bed2.n_feed = 0 ; 
    END # reinitial 
    SWITCH 
        plant.bed1.cstep := plant.bed1.pressurisation ; 
        plant.bed2.cstep := plant.bed2.blowdown ; 
    END # switch 
    END # parallel 
    CONTINUE FOR 2
    SWITCH 
        plant.bed1.cstep := plant.bed1.adsorption ; 
        plant.bed2.cstep := plant.bed2.desorption; 
    END # switch 
    CONTINUE FOR 96
    SWITCH 
        plant.bed1.cstep := plant.bed1.pressureequalisation1 ; 
        plant.bed2.cstep := plant.bed2.pressureequalisation2 ; 
    END # switch 
    CONTINUE FOR 2 
    SWITCH 
        plant.bed1.cstep := plant.bed1.blowdown ; 
        plant.bed2.cstep := plant.bed2.pressurisation ;
    END # switch 
    CONTINUE FOR 2 
    SWITCH 
        plant.bed1.cstep := plant.bed1.desorption ; 
        plant.bed2.cstep := plant.bed2.adsorption ; 
    END # switch 
    CONTINUE FOR 96
    SWITCH 
        plant.bed1.cstep := plant.bed1.pressureequalisation2 ;
        plant.bed2.cstep := plant.bed2.pressureequalisation1 ;
    END # switch 
    CONTINUE FOR 2
    END # sequence 
    END # while 
    REINITIAL 
        plant.bed1.n_O2_prod, 
        plant.bed1.n_N2_prod, 
        plant.bed1.n_O2_waste,
        plant.bed1.n_N2_waste, 
        plant.bed1.n_feed,
        plant.bed2.n_O2_prod,
        plant.bed2.n_N2_prod, 
        plant.bed2.n_O2_waste, 
        plant.bed2.n_N2_waste, 
        plant.bed2.n_feed 
    WITH 
        plant.bed1.n_O2_prod = 0 ; 
        plant.bed1.n_N2_prod = 0 ; 
        plant.bed1.n_O2_waste = 0 ; 
        plant.bed1.n_N2_waste = 0 ; 
        plant.bed1.n_feed = 0 ;
        plant.bed2.n_O2_prod = 0 ; 
        plant.bed2.n_N2_prod = 0 ; 
        plant.bed2.n_O2_waste = 0 ; 
        plant.bed2.n_N2_waste = 0 ; 
        plant.bed2.n_feed = 0 ; 
    END # reinitial 
    SWITCH 
        plant.bed1.cstep := plant.bed1.pressurisation ; 
        plant.bed2.cstep := plant.bed2.blowdown ; 
    END # switch 
        MONITOR ON 
    CONTINUE FOR 2 
    SWITCH 
        plant.bed1.cstep := plant.bed1.adsorption ;
        plant.bed2.cstep := plant.bed2.desorption ; 
    END # switch 
    CONTINUE FOR 96
    SWITCH 
        plant.bed1.cstep := plant.bed1.pressureequalisation1 ; 
        plant.bed2.cstep := plant.bed2.pressureequalisation2 ;
    END # switch 
    CONTINUE FOR 2 
    SWITCH 
        plant.bed1.cstep := plant.bed1.blowdown ; 
        plant.bed2.cstep := plant.bed2.pressurisation ;
    END # switch 
    CONTINUE FOR 2 
    SWITCH 
        plant.bed1.cstep := plant.bed1.desorption ; 
        plant.bed2.cstep := plant.bed2.adsorption ; 
    END # switch 
    CONTINUE FOR 96
    SWITCH 
        plant.bed1.cstep := plant.bed1.pressureequalisation2 ; 
        plant.bed2.cstep := plant.bed2.pressureequalisation1 ;
    END # switch 
    CONTINUE FOR 2
    END #sequence 



END # PROCESS OK
